TOKEN "api_revenue_trend_endpoint_read_4158" READ

NODE filter_prods
DESCRIPTION >
    This query selects all fields from the 'products' table. It includes optional conditions based on whether certain parameters are defined:

    If id_param is defined, it filters the results to include only the product with the matching ID.
    If category is defined and not equal to "all", it filters the results to include products from the specified category.

    The query is constructed to be flexible, allowing for the inclusion of these conditions based on the parameters provided.

SQL >

    %
    SELECT *
    FROM products
    WHERE
        1
        {% if defined(prod_id) and prod_id != "All" %}
            AND id = {{ String(prod_id) }}
        {% end %}
        {% if defined(category) and category != "all" %}
            and category = {{ String(category) }}
        {% end %}



NODE filter_join
DESCRIPTION >
    This query aggregates data from one of three materialized views (events_by_day_mv, events_by_hour_mv, or events_by_min_mv), depending on the number of hours specified in hrs. It selects timestamps (ts), product IDs, counts of carts, counts of sales, and product prices. The choice of the materialized view is based on hrs: it selects from events_by_day_mv if hrs is more than 24, from events_by_hour_mv if hrs is more than 3 but less than or equal to 24, and from events_by_min_mv otherwise. The query joins with the 'filter_prods' table to filter by product ID and includes a WHERE clause that filters data to the specified time range (hours_param, with a default of 2400 hours if not specified). The results are grouped by timestamp, product ID, and price.

SQL >

    %
    {% set hrs = UInt16(hours_param) %}
    SELECT
        ts,
        product,
        countIfMerge(n_carts) n_carts,
        countIfMerge(n_sales) n_sales,
        price
    FROM
        {% if hrs > 24 %} events_by_day_mv
        {% elif hrs > 3 %} events_by_hour_mv
        {% else %} events_by_min_mv
        {% end %}
    JOIN filter_prods ON product = id
    WHERE
        ts
        >= now()
        - interval {{ UInt16(hours_param, description="Hours to go back", default=2400) }} hour
    GROUP BY ts, product, price



NODE endpoint
DESCRIPTION >
    This query calculates the total cart value and revenue for each timestamp (ts) from the 'filter_join' table. It does so by:

    Multiplying the number of carts (n_carts) and sales (n_sales) by the price for each record, then summing these values across all records with the same timestamp.
    The results are rounded to the nearest integer.
    The query groups the data by timestamp.
    The final output is ordered by timestamp.

    This provides an aggregated view of cart value and revenue over time.

SQL >

    SELECT
        ts,
        round(sum(n_carts * price)) cart_value,
        round(sum(n_sales * price)) revenue
    FROM filter_join
    GROUP BY ts
    ORDER BY ts


